-- This script was generated by the Schema Diff utility in pgAdmin 4
-- For the circular dependencies, the order in which Schema Diff writes the objects is not very sophisticated
-- and may require manual changes to the script to ensure changes are applied in the correct order.
-- Please report an issue for any failure with the reproduction steps.

-- ***********************
-- *** Create Tables *****
-- ***********************

-- 1.1 Create Push Notifications Table
DROP TABLE IF EXISTS public.push_notifications;
CREATE TABLE IF NOT EXISTS public.push_notifications
(
    id uuid NOT NULL DEFAULT uuid_generate_v4(),
    endpoint text COLLATE pg_catalog."default" DEFAULT ''::text,
    expiration_time text COLLATE pg_catalog."default" DEFAULT ''::text,
    p256dh text COLLATE pg_catalog."default" DEFAULT ''::text,
    auth text COLLATE pg_catalog."default" DEFAULT ''::text,
    CONSTRAINT "push_notifications_pkey" PRIMARY KEY (id)
)
TABLESPACE pg_default;
ALTER TABLE IF EXISTS public.groups
    OWNER to postgres;


-- 1.2 Create policies
GRANT ALL ON TABLE public.groups TO anon;
GRANT ALL ON TABLE public.groups TO authenticated;
GRANT ALL ON TABLE public.groups TO postgres;
GRANT ALL ON TABLE public.groups TO service_role;

--1.Insert
DROP function if exists insert_into_push_notifications(
    endpoint_in text, 
    expiration_time_in text, 
    p256dh_in text, 
    auth_in text
);
create or replace function insert_into_push_notifications(
    endpoint_in text, 
    expiration_time_in text, 
    p256dh_in text, 
    auth_in text
)
returns void
language plpgsql
security definer
as
$$
BEGIN
    INSERT INTO "push_notifications" (
        endpoint, 
        expiration_time, 
        p256dh, 
        auth   
    )
    VALUES (
        endpoint_in, 
        expiration_time_in, 
        p256dh_in, 
        auth_in    
    );
END;
$$;