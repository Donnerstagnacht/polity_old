-- This script was generated by the Schema Diff utility in pgAdmin 4
-- For the circular dependencies, the order in which Schema Diff writes the objects is not very sophisticated
-- and may require manual changes to the script to ensure changes are applied in the correct order.
-- Please report an issue for any failure with the reproduction steps.

-- ***********************
-- *** Create Tables *****
-- ***********************





-- **************************************
-- *** Create Functions/Transactions ****
-- **************************************

-- 1. Insert Group
CREATE OR REPLACE FUNCTION public.create_group(
	name text,
	description text,
	creator uuid,
	level text)
    RETURNS uuid
    LANGUAGE 'plpgsql'
    COST 100
    VOLATILE SECURITY DEFINER PARALLEL UNSAFE
AS $BODY$
declare
  new_id uuid;
BEGIN
  INSERT INTO "groups" (name, description, creator, level)
  VALUES (name, description, creator, level)
  returning id into new_id;
  return new_id;
END;
$BODY$;

ALTER FUNCTION public.create_group(text, text, uuid, text)
    OWNER TO postgres;

GRANT EXECUTE ON FUNCTION public.create_group(text, text, uuid, text) TO PUBLIC;
GRANT EXECUTE ON FUNCTION public.create_group(text, text, uuid, text) TO anon;
GRANT EXECUTE ON FUNCTION public.create_group(text, text, uuid, text) TO authenticated;
GRANT EXECUTE ON FUNCTION public.create_group(text, text, uuid, text) TO postgres;
GRANT EXECUTE ON FUNCTION public.create_group(text, text, uuid, text) TO service_role;


-- 2. Insert Member
CREATE OR REPLACE FUNCTION public.add_member(
	user_id uuid,
	group_id uuid,
	is_admin boolean,
	is_board_member boolean,
	is_president boolean)
    RETURNS void
    LANGUAGE 'plpgsql'
    COST 100
    VOLATILE SECURITY DEFINER PARALLEL UNSAFE
AS $BODY$
BEGIN
  INSERT INTO "group_members" (user_id, group_id, is_admin, is_board_member, is_president)
  VALUES (user_id, group_id, is_admin, is_board_member, is_president);
END;
$BODY$;

ALTER FUNCTION public.add_member(uuid, uuid, boolean, boolean, boolean)
    OWNER TO postgres;

GRANT EXECUTE ON FUNCTION public.add_member(uuid, uuid, boolean, boolean, boolean) TO PUBLIC;
GRANT EXECUTE ON FUNCTION public.add_member(uuid, uuid, boolean, boolean, boolean) TO anon;
GRANT EXECUTE ON FUNCTION public.add_member(uuid, uuid, boolean, boolean, boolean) TO authenticated;
GRANT EXECUTE ON FUNCTION public.add_member(uuid, uuid, boolean, boolean, boolean) TO postgres;
GRANT EXECUTE ON FUNCTION public.add_member(uuid, uuid, boolean, boolean, boolean) TO service_role;

-- 3. Increment Groups Counter
CREATE OR REPLACE FUNCTION public.increment_groups_counter(
	userid uuid)
    RETURNS void
    LANGUAGE 'plpgsql'
    COST 100
    VOLATILE SECURITY DEFINER PARALLEL UNSAFE
AS $BODY$
BEGIN
  update profiles
  set "groups_counter" = "groups_counter" + 1
  where id = userId;
END
$BODY$;

ALTER FUNCTION public.increment_groups_counter(uuid)
    OWNER TO postgres;

GRANT EXECUTE ON FUNCTION public.increment_groups_counter(uuid) TO PUBLIC;
GRANT EXECUTE ON FUNCTION public.increment_groups_counter(uuid) TO anon;
GRANT EXECUTE ON FUNCTION public.increment_groups_counter(uuid) TO authenticated;
GRANT EXECUTE ON FUNCTION public.increment_groups_counter(uuid) TO postgres;
GRANT EXECUTE ON FUNCTION public.increment_groups_counter(uuid) TO service_role;


-- 4. Create Groups Transaction
-- code moved to "20220627112230_create_group_transaction.sql" file
