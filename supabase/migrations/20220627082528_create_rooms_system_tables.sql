-- This script was generated by the Schema Diff utility in pgAdmin 4
-- For the circular dependencies, the order in which Schema Diff writes the objects is not very sophisticated
-- and may require manual changes to the script to ensure changes are applied in the correct order.
-- Please report an issue for any failure with the reproduction steps.

-- Create Rooms Table
CREATE TABLE IF NOT EXISTS public.rooms
(
    id uuid NOT NULL DEFAULT uuid_generate_v4(),
    created_at timestamp with time zone NOT NULL DEFAULT now(),
    CONSTRAINT rooms_pkey PRIMARY KEY (id)
)
TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.rooms
    OWNER to postgres;
GRANT ALL ON TABLE public.rooms TO anon;
GRANT ALL ON TABLE public.rooms TO authenticated;
GRANT ALL ON TABLE public.rooms TO postgres;
GRANT ALL ON TABLE public.rooms TO service_role;


-- Create Messages Table
CREATE TABLE IF NOT EXISTS public.rooms_messages
(
    id uuid NOT NULL DEFAULT uuid_generate_v4(),
    created_at timestamp with time zone NOT NULL DEFAULT now(),
    room_id uuid NOT NULL,
    user_id uuid NOT NULL,
    content text COLLATE pg_catalog."default" NOT NULL DEFAULT ''::text,
    CONSTRAINT rooms_messages_pkey PRIMARY KEY (id),
    CONSTRAINT rooms_messages_room_id_fkey FOREIGN KEY (room_id)
        REFERENCES public.rooms (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION,
    CONSTRAINT rooms_messages_user_id_fkey FOREIGN KEY (user_id)
        REFERENCES public.profiles (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
)
TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.rooms_messages
    OWNER to postgres;
GRANT ALL ON TABLE public.rooms_messages TO anon;
GRANT ALL ON TABLE public.rooms_messages TO authenticated;
GRANT ALL ON TABLE public.rooms_messages TO postgres;
GRANT ALL ON TABLE public.rooms_messages TO service_role;


--Create Participants table
/* CREATE TABLE IF NOT EXISTS public.rooms_participants
(
    id uuid NOT NULL DEFAULT uuid_generate_v4(),
    created_at timestamp with time zone NOT NULL DEFAULT now(),
    room_id uuid NOT NULL,
    participant_id uuid NOT NULL,
    is_group boolean NOT NULL DEFAULT false,
    CONSTRAINT rooms_participants_pkey PRIMARY KEY (id),
    CONSTRAINT rooms_participants_participant_id_fkey FOREIGN KEY (participant_id)
        REFERENCES public.profiles (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION,
    CONSTRAINT rooms_participants_room_id_fkey FOREIGN KEY (room_id)
        REFERENCES public.rooms (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
)
TABLESPACE pg_default; */
CREATE TABLE IF NOT EXISTS public.rooms_participants
(
    id uuid NOT NULL DEFAULT uuid_generate_v4(),
    created_at timestamp with time zone NOT NULL DEFAULT now(),
    room_id uuid NOT NULL,
    user_id uuid,
    group_id uuid,
    accepted boolean NOT NULL DEFAULT false,
    CONSTRAINT rooms_participants_pkey PRIMARY KEY (id),
    CONSTRAINT rooms_user_id_participant_id_fkey FOREIGN KEY (user_id)
        REFERENCES public.profiles (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION,
    CONSTRAINT rooms_participants_room_id_fkey FOREIGN KEY (room_id)
        REFERENCES public.rooms (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION,
    CONSTRAINT rooms_participants_group_id_fkey FOREIGN KEY (group_id)
        REFERENCES public.groups (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
)
TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.rooms_participants
    OWNER to postgres;
GRANT ALL ON TABLE public.rooms_participants TO anon;
GRANT ALL ON TABLE public.rooms_participants TO authenticated;
GRANT ALL ON TABLE public.rooms_participants TO postgres;
GRANT ALL ON TABLE public.rooms_participants TO service_role;


-- 1. Create New Room
DROP function if exists insert_room();
create or replace function insert_room()
  returns uuid
  language plpgsql
  SECURITY DEFINER
AS
$$
declare
  new_room_id uuid;
BEGIN
  INSERT INTO "rooms" DEFAULT VALUES
  returning id into new_room_id;
  return new_room_id;
END;
$$;

/* DROP function if exists insert_room();
create or replace function insert_room()
  returns uuid
  language plpgsql
  SECURITY DEFINER
AS
$$
declare
  new_room_id uuid;
BEGIN
  INSERT INTO "rooms" DEFAULT VALUES
  returning id into new_room_id;
  return new_room_id;
END;
$$; */


-- 2. Create new Participant
DROP function if exists insert_participant(room_id uuid, user_id uuid, group_id uuid);
create or replace function insert_participant(room_id uuid, user_id uuid default null, group_id uuid default null, accepted boolean default true)
returns void
language plpgsql
security definer
as
$$
BEGIN
  INSERT INTO "rooms_participants" (room_id, user_id, group_id, accepted)
  VALUES (room_id, user_id, group_id, accepted);
END;
$$;

-- 3 Delete Room
DROP function if exists delete_room(followerId uuid, followingId uuid);
DROP function if exists delete_room(room_id uuid);
create or replace function delete_room(room_id uuid)
returns void
language plpgsql
security definer
as
$$
BEGIN
  DELETE FROM "rooms"
  WHERE
  "id" = room_id;
END;
$$;


-- 4. Delete Participant
DROP function if exists delete_participant(room_id uuid, participant_id uuid);
create or replace function delete_participant(room_id uuid, participant_id uuid)
returns void
language plpgsql
security definer
as
$$
BEGIN
  DELETE FROM "rooms_participants"
  WHERE
  "room_id" = room_id
  and
  ("group_id" = participant_id or "user_id"="participant_id");
END;
$$;



