-- This script was generated by the Schema Diff utility in pgAdmin 4
-- For the circular dependencies, the order in which Schema Diff writes the objects is not very sophisticated
-- and may require manual changes to the script to ensure changes are applied in the correct order.
-- Please report an issue for any failure with the reproduction steps.

CREATE TABLE IF NOT EXISTS public.profiles
(
    "id" uuid NOT NULL,
    "updated_at" timestamp with time zone,
    "name" text COLLATE pg_catalog."default" DEFAULT ''::text,
    "avatar_url" text COLLATE pg_catalog."default" DEFAULT ''::text,
    "city" text COLLATE pg_catalog."default" DEFAULT ''::text,
    "contact_email" text COLLATE pg_catalog."default" DEFAULT ''::text,
    "contact_phone" text COLLATE pg_catalog."default" DEFAULT ''::text,
    "post_code" text COLLATE pg_catalog."default" DEFAULT ''::text,
    "street" text COLLATE pg_catalog."default" DEFAULT ''::text,
    "about" text COLLATE pg_catalog."default" DEFAULT ''::text,
    "website" text COLLATE pg_catalog."default" DEFAULT ''::text,
    "amendment_counter" bigint   DEFAULT 0::bigint,
    "follower_counter" bigint  DEFAULT 0::bigint,
    "following_counter" bigint  DEFAULT 0::bigint,
    "groups_counter" bigint  DEFAULT 0::bigint,
    CONSTRAINT profiles_pkey PRIMARY KEY (id),
    --CONSTRAINT profiles_name_key UNIQUE (name),
    CONSTRAINT profiles_id_fkey FOREIGN KEY (id)
        REFERENCES auth.users (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
    -- CONSTRAINT name_length CHECK (char_length(name) >= 3)
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.profiles OWNER to postgres;
GRANT ALL ON TABLE public.profiles TO anon;
GRANT ALL ON TABLE public.profiles TO authenticated;
GRANT ALL ON TABLE public.profiles TO postgres;
GRANT ALL ON TABLE public.profiles TO service_role;

-- review error here - probably because the table profile is not setup corectly?
-- Copy users to profile
CREATE OR REPLACE FUNCTION signup_copy_to_users_table()
RETURNS TRIGGER AS $$
  BEGIN
    INSERT INTO public.profiles (id)
    VALUES(new.id);

    RETURN NEW;
  END;
$$
LANGUAGE plpgsql SECURITY DEFINER;

DROP TRIGGER IF EXISTS signup_copy on auth.users;
CREATE TRIGGER signup_copy
AFTER INSERT ON auth.users
FOR EACH ROW EXECUTE PROCEDURE signup_copy_to_users_table();

-- Set up Storage!
insert into storage.buckets (id, name, public)
values ('avatars', 'avatars', true);
