-- This script was generated by the Schema Diff utility in pgAdmin 4
-- For the circular dependencies, the order in which Schema Diff writes the objects is not very sophisticated
-- and may require manual changes to the script to ensure changes are applied in the correct order.
-- Please report an issue for any failure with the reproduction steps.

CREATE TABLE IF NOT EXISTS public.profiles
(
    "id" uuid NOT NULL,
    "updated_at" timestamp with time zone,
    "username" text COLLATE pg_catalog."default" DEFAULT ''::text,
    "avatarUrl" text COLLATE pg_catalog."default" DEFAULT ''::text,
    "city" text COLLATE pg_catalog."default" DEFAULT ''::text,
    "contactEmail" text COLLATE pg_catalog."default" DEFAULT ''::text,
    "contactPhone" text COLLATE pg_catalog."default" DEFAULT ''::text,
    "postCode" text COLLATE pg_catalog."default" DEFAULT ''::text,
    "street" text COLLATE pg_catalog."default" DEFAULT ''::text,
    "about" text COLLATE pg_catalog."default" DEFAULT ''::text,
    "website" text COLLATE pg_catalog."default" DEFAULT ''::text,
    CONSTRAINT profiles_pkey PRIMARY KEY (id),
    CONSTRAINT profiles_username_key UNIQUE (username),
    CONSTRAINT profiles_id_fkey FOREIGN KEY (id)
        REFERENCES auth.users (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
    -- CONSTRAINT username_length CHECK (char_length(username) >= 3)
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.profiles
    OWNER to postgres;

ALTER TABLE IF EXISTS public.profiles
    ENABLE ROW LEVEL SECURITY;

GRANT ALL ON TABLE public.profiles TO anon;

GRANT ALL ON TABLE public.profiles TO authenticated;

GRANT ALL ON TABLE public.profiles TO postgres;

GRANT ALL ON TABLE public.profiles TO service_role;
CREATE POLICY "Public profiles are viewable by everyone."
    ON public.profiles
    AS PERMISSIVE
    FOR SELECT
    TO public
    USING (true);
CREATE POLICY "Users can insert their own profile."
    ON public.profiles
    AS PERMISSIVE
    FOR INSERT
    TO public
    WITH CHECK ((auth.uid() = id));
CREATE POLICY "Users can update own profile."
    ON public.profiles
    AS PERMISSIVE
    FOR UPDATE
    TO public
    USING ((auth.uid() = id));

-- Copy users to profile
CREATE OR REPLACE FUNCTION signup_copy_to_users_table()
RETURNS TRIGGER AS $$
  BEGIN
    INSERT INTO public.profiles (id)
    VALUES(new.id);
  
    RETURN NEW;
  END;
$$
LANGUAGE plpgsql SECURITY DEFINER;

DROP TRIGGER IF EXISTS signup_copy on auth.users;
CREATE TRIGGER signup_copy
AFTER INSERT ON auth.users
FOR EACH ROW EXECUTE PROCEDURE signup_copy_to_users_table();

-- Set up Storage!
insert into storage.buckets (id, name)
values ('avatars', 'avatars');

create policy "Avatar images are accessible for authenticated users."
  on storage.objects for select
  using (
    bucket_id = 'avatars'
    and auth.role() = 'authenticated'    
);

create policy "Anyone can upload an avatar."
  on storage.objects for insert
  with check (
    bucket_id = 'avatars'
    and auth.role() = 'authenticated' 
);